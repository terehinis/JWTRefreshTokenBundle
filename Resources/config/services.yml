parameters:
  terehinis.jwtrefreshtoken.refresh_token.class: terehinis\JWTRefreshTokenBundle\Entity\RefreshToken

services:
    terehinis.jwtrefreshtoken.send_token:
        class: terehinis\JWTRefreshTokenBundle\EventListener\AttachRefreshTokenOnSuccessListener
        arguments: [ "@terehinis.jwtrefreshtoken.refresh_token_manager", "%terehinis_jwt_refresh_token.ttl%", "@validator", "@request_stack", "%terehinis_jwt_refresh_token.user_identity_field%" ]
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_success, method: attachRefreshToken }

    terehinis.jwtrefreshtoken.refresh_token_manager:
        class: terehinis\JWTRefreshTokenBundle\Doctrine\RefreshTokenManager
        public: true
        arguments: [ "@terehinis.jwtrefreshtoken.entity_manager", "%terehinis.jwtrefreshtoken.refresh_token.class%" ]

    terehinis.jwtrefreshtoken:
        class: terehinis\JWTRefreshTokenBundle\Service\RefreshToken
        public: true
        arguments: [ "@terehinis.jwtrefreshtoken.authenticator", "@terehinis.jwtrefreshtoken.user_provider", "@lexik_jwt_authentication.handler.authentication_success", "@lexik_jwt_authentication.handler.authentication_failure", "@terehinis.jwtrefreshtoken.refresh_token_manager", "%terehinis_jwt_refresh_token.ttl%", "%terehinis_jwt_refresh_token.security.firewall%", "%terehinis_jwt_refresh_token.ttl_update%", "@event_dispatcher" ]

    terehinis.jwtrefreshtoken.user_provider:
        class: terehinis\JWTRefreshTokenBundle\Security\Provider\RefreshTokenProvider
        arguments: [ "@terehinis.jwtrefreshtoken.refresh_token_manager" ]

    terehinis.jwtrefreshtoken.authenticator:
        class: terehinis\JWTRefreshTokenBundle\Security\Authenticator\RefreshTokenAuthenticator

    terehinis\JWTRefreshTokenBundle\Command\:
        resource: '../../Command/*'
        tags: ['console.command']
